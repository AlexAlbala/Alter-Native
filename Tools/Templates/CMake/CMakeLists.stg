CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(<PROJECT_NAME> CXX)

##################################################
#Precompiled headers
##################################################
#SET (CMAKE_MODULE_PATH "$ENV{ALTERNATIVE_TOOLS_PATH}/CMake")
#INCLUDE($ENV{ALTERNATIVE_TOOLS_PATH}/Cotire/CMake/cotire.cmake)

##################################################
#Enable C++11 mode
##################################################
INCLUDE($ENV{ALTERNATIVE_TOOLS_PATH}/Code/CMAKE-CXX11.cmake)

SET_PROPERTY(GLOBAL PROPERTY GL_IS_RELEASE <RELEASE>)
SET(EXECPATH <EXEC:{E|<E>}; separator=" ">)

<if(IS_DLL)>
ADD_LIBRARY(<TARGET_NAME> ${EXECPATH})
<else>
ADD_EXECUTABLE(<TARGET_NAME> ${EXECPATH})
<endif>

<INCLUDE_DIRS:{I|
INCLUDE_DIRECTORIES(<I>)
}>
<LINK_LIBS:{L|
TARGET_LINK_LIBRARIES(<TARGET_NAME> <L>)
}>
IF(UNIX)
IF(NOT ANDROID)
TARGET_LINK_LIBRARIES(<TARGET_NAME> pthread)
ENDIF()
ENDIF(UNIX)
IF(WIN32)
TARGET_LINK_LIBRARIES(<TARGET_NAME> Ws2_32.lib)
ENDIF(WIN32)

#COTIRE(<TARGET_NAME>)
SET(PROJ_NAME <TARGET_NAME>)

##################################################
#Find boost libraries
##################################################
INCLUDE($ENV{ALTERNATIVE_TOOLS_PATH}/Code/CMAKE-BOOST.cmake)
