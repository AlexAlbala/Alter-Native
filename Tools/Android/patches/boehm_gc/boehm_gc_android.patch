diff -rupN gc_orig/ChangeLog gc_fin/ChangeLog
--- gc_orig/ChangeLog	2012-08-21 09:55:44.000000000 +0200
+++ gc_fin/ChangeLog	2012-11-09 09:39:10.000000000 +0100
@@ -433,7 +433,7 @@
 2012-01-26  Ivan Maidanski <ivmai@mail.ru>
 
 	* include/private/gcconfig.h (USE_GET_STACKBASE_FOR_MAIN): Define if
-	PLATFORM_ANDROID.
+	__ANDROID__.
 
 2012-01-26  Ivan Maidanski <ivmai@mail.ru>  (really Daniel R. Grayson)
 
@@ -444,7 +444,7 @@
 2012-01-24  Ivan Maidanski <ivmai@mail.ru>
 
 	* pthread_support.c (STAT_READ, STAT_BUF_SIZE): Move the definition
-	out of PLATFORM_ANDROID condition.
+	out of __ANDROID__ condition.
 	* pthread_support.c (GC_get_nprocs_present): New static function
 	obtaining number of avalable CPUs from
 	"/sys/devices/system/cpu/present" (only Linux/arm excluding NaCl).
@@ -3445,19 +3445,19 @@
 
 2009-12-08  Ivan Maidanski <ivmai@mail.ru> (with input from Marcos Dione)
 
-	* doc/README.macros (IGNORE_DYNAMIC_LOADING, PLATFORM_ANDROID):
+	* doc/README.macros (IGNORE_DYNAMIC_LOADING, __ANDROID__):
 	Document.
-	* dyn_load.c: Don't include <elf.h> if PLATFORM_ANDROID.
+	* dyn_load.c: Don't include <elf.h> if __ANDROID__.
 	* dyn_load.c: Include bionic <linker.h> (instead of <link.h>) if
-	PLATFORM_ANDROID.
+	__ANDROID__.
 	* include/private/gcconfig.h (LINUX): Define also if
-	PLATFORM_ANDROID (for the windows-based toolkit).
+	__ANDROID__ (for the windows-based toolkit).
 	* include/private/gcconfig.h (SEARCH_FOR_DATA_START): Explicitly
 	define for Android/x86 platform.
 	* include/private/gcconfig.h (IGNORE_DYNAMIC_LOADING): Recognize
 	new macro (undefine DYNAMIC_LOADING in this case).
 	* include/private/gcconfig.h (CANCEL_SAFE): Don't define if
-	PLATFORM_ANDROID.
+	__ANDROID__.
 	* include/private/gcconfig.h (IF_CANCEL): Fix definition for the
 	explicitly defined CANCEL_SAFE.
 
@@ -6518,7 +6518,7 @@
 	                                    George Talbot)
 	(diff95_cvs)
 
-	* include/private/gcconfig.h (PLATFORM_ANDROID): New macro
+	* include/private/gcconfig.h (__ANDROID__): New macro
 	recognized (for Linux on ARM32 without glibc).
 	* include/private/gcconfig.h (STRTOULL): Define for all targets
 	(define as "strtoul" for most targets except for LLP64/Win64).
diff -rupN gc_orig/dyn_load.c gc_fin/dyn_load.c
--- gc_orig/dyn_load.c	2012-08-21 09:55:44.000000000 +0200
+++ gc_fin/dyn_load.c	2012-11-09 09:56:23.000000000 +0100
@@ -87,16 +87,17 @@ STATIC GC_has_static_roots_func GC_has_s
     || (defined(__ELF__) && (defined(LINUX) || defined(FREEBSD) \
                              || defined(NETBSD) || defined(OPENBSD)))
 # include <stddef.h>
-# if !defined(OPENBSD) && !defined(PLATFORM_ANDROID)
+# if !defined(OPENBSD) && !defined(__ANDROID__)
     /* FIXME: Why we exclude it for OpenBSD? */
     /* Exclude Android because linker.h below includes its own version. */
 #   include <elf.h>
 # endif
-# ifdef PLATFORM_ANDROID
+# ifdef __ANDROID__
     /* The header file is in "bionic/linker" folder of Android sources. */
     /* If you don't need the "dynamic loading" feature, you may build   */
     /* the collector with -D IGNORE_DYNAMIC_LOADING.                    */
-#   include <linker.h>
+//#   include <linker.h>
+#   include "link.h"
 # else
 #   include <link.h>
 # endif
@@ -197,7 +198,7 @@ GC_INNER void GC_register_dynamic_librar
         int i;
 
         e = (ElfW(Ehdr) *) lm->l_addr;
-#       ifdef PLATFORM_ANDROID
+#       ifdef __ANDROID__
           if (e == NULL)
             continue;
 #       endif
@@ -621,11 +622,12 @@ STATIC GC_bool GC_register_dynamic_libra
 #   ifndef PF_W
 #     define PF_W       2
 #   endif
-# elif !defined(PLATFORM_ANDROID)
+//# elif !defined(__ANDROID__)
+# else
 #  include <elf.h>
 # endif
 
-# ifndef PLATFORM_ANDROID
+# ifndef __ANDROID__
 #   include <link.h>
 # endif
 
@@ -683,7 +685,7 @@ GC_INNER void GC_register_dynamic_librar
         int i;
 
         e = (ElfW(Ehdr) *) lm->l_addr;
-#       ifdef PLATFORM_ANDROID
+#       ifdef __ANDROID__
           if (e == NULL)
             continue;
 #       endif
diff -rupN gc_orig/extra/threadlibs.c gc_fin/extra/threadlibs.c
--- gc_orig/extra/threadlibs.c	2012-08-21 09:55:44.000000000 +0200
+++ gc_fin/extra/threadlibs.c	2012-11-09 09:40:37.000000000 +0100
@@ -28,7 +28,7 @@ int main(void)
                "-Wl,--wrap -Wl,pthread_detach -Wl,--wrap -Wl,pthread_sigmask "
                "-Wl,--wrap -Wl,pthread_exit -Wl,--wrap -Wl,pthread_cancel\n");
 #   endif
-#   if (defined(GC_LINUX_THREADS) && !defined(PLATFORM_ANDROID)) \
+#   if (defined(GC_LINUX_THREADS) && !defined(__ANDROID__)) \
         || defined(GC_IRIX_THREADS) || defined(GC_DARWIN_THREADS) \
         || defined(GC_AIX_THREADS) || defined(GC_GNU_THREADS)
 #       ifdef GC_USE_DLOPEN_WRAP
diff -rupN gc_orig/include/gc_config_macros.h gc_fin/include/gc_config_macros.h
--- gc_orig/include/gc_config_macros.h	2012-08-21 09:55:44.000000000 +0200
+++ gc_fin/include/gc_config_macros.h	2012-11-09 09:40:37.000000000 +0100
@@ -281,7 +281,7 @@
 /* retrieve the call chain.                                             */
 #if (defined(__linux__) || defined(__NetBSD__) || defined(__OpenBSD__) \
      || defined(__FreeBSD__) || defined(__DragonFly__) \
-     || defined(PLATFORM_ANDROID)) && !defined(GC_CAN_SAVE_CALL_STACKS)
+     || defined(__ANDROID__)) && !defined(GC_CAN_SAVE_CALL_STACKS)
 # define GC_ADD_CALLER
 # if __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
     /* gcc knows how to retrieve return address, but we don't know      */
@@ -321,7 +321,7 @@
 #   endif
 # endif
 
-# if !defined(GC_PTHREAD_EXIT_ATTRIBUTE) && !defined(PLATFORM_ANDROID) \
+# if !defined(GC_PTHREAD_EXIT_ATTRIBUTE) && !defined(__ANDROID__) \
      && (defined(GC_LINUX_THREADS) || defined(GC_SOLARIS_THREADS))
     /* Intercept pthread_exit on Linux and Solaris.     */
 #   if defined(__GNUC__) /* since GCC v2.7 */
diff -rupN gc_orig/include/private/gcconfig.h gc_fin/include/private/gcconfig.h
--- gc_orig/include/private/gcconfig.h	2012-08-21 09:55:44.000000000 +0200
+++ gc_fin/include/private/gcconfig.h	2012-11-09 09:40:57.000000000 +0100
@@ -38,7 +38,7 @@
 /* Machine specific parts contributed by various people.  See README file. */
 
 /* First a unified test for Linux: */
-# if (defined(linux) || defined(__linux__) || defined(PLATFORM_ANDROID)) \
+# if (defined(linux) || defined(__linux__) || defined(__ANDROID__)) \
      && !defined(LINUX) && !defined(__native_client__)
 #   define LINUX
 # endif
@@ -724,7 +724,7 @@
 #            if defined(__GLIBC__) && __GLIBC__ >= 2
 #              define SEARCH_FOR_DATA_START
 #            else /* !GLIBC2 */
-#              ifdef PLATFORM_ANDROID
+#              ifdef __ANDROID__
 #                define __environ environ
 #              endif
                extern char **__environ;
@@ -1235,7 +1235,7 @@
 #            endif
 #            include <features.h>
 #            if defined(__GLIBC__) && __GLIBC__ >= 2 \
-                || defined(PLATFORM_ANDROID)
+                || defined(__ANDROID__)
 #                define SEARCH_FOR_DATA_START
 #            else
                  extern char **__environ;
@@ -1924,7 +1924,7 @@
 #            define DYNAMIC_LOADING
 #            include <features.h>
 #            if defined(__GLIBC__) && __GLIBC__ >= 2 \
-                || defined(PLATFORM_ANDROID)
+                || defined(__ANDROID__)
 #                define SEARCH_FOR_DATA_START
 #            else
                  extern char **__environ;
@@ -2347,7 +2347,7 @@
 # define DATAEND (ptr_t)(end)
 #endif
 
-#if defined(PLATFORM_ANDROID) && !defined(THREADS) \
+#if defined(__ANDROID__) && !defined(THREADS) \
     && !defined(USE_GET_STACKBASE_FOR_MAIN)
   /* Always use pthread_attr_getstack on Android ("-lpthread" option is  */
   /* not needed to be specified manually) since GC_linux_main_stack_base */
@@ -2355,7 +2355,7 @@
 # define USE_GET_STACKBASE_FOR_MAIN
 #endif
 
-#if (defined(SVR4) || defined(PLATFORM_ANDROID)) && !defined(GETPAGESIZE)
+#if (defined(SVR4) || defined(__ANDROID__)) && !defined(GETPAGESIZE)
 # include <unistd.h>
 # define GETPAGESIZE()  sysconf(_SC_PAGESIZE)
 #endif
@@ -2575,7 +2575,7 @@
 #endif
 
 #if defined(UNIX_LIKE) && defined(THREADS) && !defined(NO_CANCEL_SAFE) \
-    && !defined(PLATFORM_ANDROID)
+    && !defined(__ANDROID__)
   /* Make the code cancellation-safe.  This basically means that we     */
   /* ensure that cancellation requests are ignored while we are in      */
   /* the collector.  This applies only to Posix deferred cancellation;  */
@@ -2599,7 +2599,7 @@
 
 #if !defined(CAN_HANDLE_FORK) && !defined(NO_HANDLE_FORK) \
     && ((defined(GC_PTHREADS) && !defined(HURD) && !defined(NACL) \
-         && !defined(PLATFORM_ANDROID) && !defined(GC_WIN32_PTHREADS)) \
+         && !defined(__ANDROID__) && !defined(GC_WIN32_PTHREADS)) \
         || (defined(DARWIN) && defined(MPROTECT_VDB)) || defined(HANDLE_FORK))
   /* Attempts (where supported and requested) to make GC_malloc work in */
   /* a child process fork'ed from a multi-threaded parent.              */
diff -rupN gc_orig/include/private/pthread_support.h gc_fin/include/private/pthread_support.h
--- gc_orig/include/private/pthread_support.h	2012-08-21 09:55:44.000000000 +0200
+++ gc_fin/include/private/pthread_support.h	2012-11-09 09:40:57.000000000 +0100
@@ -46,7 +46,7 @@ typedef struct GC_Thread_Rep {
                                   /* guaranteed to be dead, but we may  */
                                   /* not yet have registered the join.) */
     pthread_t id;
-#   ifdef PLATFORM_ANDROID
+#   ifdef __ANDROID__
       pid_t kernel_id;
 #   endif
     /* Extra bookkeeping information the stopping code uses */
diff -rupN gc_orig/link.h gc_fin/link.h
--- gc_orig/link.h	1970-01-01 01:00:00.000000000 +0100
+++ gc_fin/link.h	2012-11-08 12:23:51.000000000 +0100
@@ -0,0 +1,25 @@
+#ifndef _LINK_H_
+#define _LINK_H_
+
+// These structures are needed by libgc
+// They are defined in mydroid/bionic/linker/linker.h, but are expected to be in <link.h>
+struct link_map
+{
+    uintptr_t l_addr;
+    char * l_name;
+    uintptr_t l_ld;
+    struct link_map * l_next;
+    struct link_map * l_prev;
+};
+
+
+struct r_debug
+{
+    int32_t r_version;
+    struct link_map * r_map;
+    void (*r_brk)(void);
+    int32_t r_state;
+    uintptr_t r_ldbase;
+};
+
+#endif
diff -rupN gc_orig/os_dep.c gc_fin/os_dep.c
--- gc_orig/os_dep.c	2012-08-21 09:55:46.000000000 +0200
+++ gc_fin/os_dep.c	2012-11-08 15:58:01.000000000 +0100
@@ -1224,7 +1224,7 @@ GC_INNER word GC_page_size = 0;
 # define GET_MAIN_STACKBASE_SPECIAL
 #endif /* !AMIGA, !BEOS, !OPENBSD, !OS2, !Windows */
 
-#if (defined(GC_LINUX_THREADS) || defined(PLATFORM_ANDROID)) && !defined(NACL)
+#if (defined(GC_LINUX_THREADS) || defined(__ANDROID__)) && !defined(NACL)
 
 # include <pthread.h>
   /* extern int pthread_getattr_np(pthread_t, pthread_attr_t *); */
diff -rupN gc_orig/pthread_stop_world.c gc_fin/pthread_stop_world.c
--- gc_orig/pthread_stop_world.c	2012-08-21 09:55:46.000000000 +0200
+++ gc_fin/pthread_stop_world.c	2012-11-09 09:39:10.000000000 +0100
@@ -394,7 +394,7 @@ GC_INNER void GC_push_all_stacks(void)
   int GC_stopping_pid = 0;
 #endif
 
-#ifdef PLATFORM_ANDROID
+#ifdef __ANDROID__
   extern int tkill(pid_t tid, int sig); /* from sys/linux-unistd.h */
 
   static int android_thread_kill(pid_t tid, int sig)
@@ -410,7 +410,7 @@ GC_INNER void GC_push_all_stacks(void)
 
     return ret;
   }
-#endif /* PLATFORM_ANDROID */
+#endif /* __ANDROID__ */
 
 /* We hold the allocation lock.  Suspend all threads that might */
 /* still be running.  Return the number of suspend signals that */
@@ -456,7 +456,7 @@ STATIC int GC_suspend_all(void)
               p -> stop_info.stack_ptr =
                         *(ptr_t *)((char *)p -> id + UTHREAD_SP_OFFSET);
 #           else
-#             ifndef PLATFORM_ANDROID
+#             ifndef __ANDROID__
                 result = pthread_kill(p -> id, SIG_SUSPEND);
 #             else
                 result = android_thread_kill(p -> kernel_id, SIG_SUSPEND);
@@ -770,7 +770,7 @@ GC_INNER void GC_start_world(void)
             if (pthread_resume_np(p -> id) != 0)
               ABORT("pthread_resume_np failed");
 #         else
-#           ifndef PLATFORM_ANDROID
+#           ifndef __ANDROID__
               result = pthread_kill(p -> id, SIG_THR_RESTART);
 #           else
               result = android_thread_kill(p -> kernel_id, SIG_THR_RESTART);
diff -rupN gc_orig/pthread_support.c gc_fin/pthread_support.c
--- gc_orig/pthread_support.c	2012-08-21 09:55:46.000000000 +0200
+++ gc_fin/pthread_support.c	2012-11-09 09:39:10.000000000 +0100
@@ -484,7 +484,7 @@ STATIC GC_thread GC_new_thread(pthread_t
         if (result == 0) return(0);
     }
     result -> id = id;
-#   ifdef PLATFORM_ANDROID
+#   ifdef __ANDROID__
       result -> kernel_id = gettid();
 #   endif
     result -> next = GC_threads[hv];
@@ -726,7 +726,7 @@ STATIC void GC_remove_all_threads_but_me
         /* the real one.                                                */
 #endif
 
-#if defined(GC_LINUX_THREADS) && !defined(PLATFORM_ANDROID) && !defined(NACL)
+#if defined(GC_LINUX_THREADS) && !defined(__ANDROID__) && !defined(NACL)
   /* Return the number of processors. */
   STATIC int GC_get_nprocs(void)
   {
@@ -760,7 +760,7 @@ STATIC void GC_remove_all_threads_but_me
     }
     return result;
   }
-#endif /* GC_LINUX_THREADS && !PLATFORM_ANDROID && !NACL */
+#endif /* GC_LINUX_THREADS && !__ANDROID__ && !NACL */
 
 #if defined(ARM32) && defined(GC_LINUX_THREADS) && !defined(NACL)
   /* Some buggy Linux/arm kernels show only non-sleeping CPUs in        */
@@ -1002,7 +1002,7 @@ GC_INNER void GC_thr_init(void)
       GC_nprocs = pthread_num_processors_np();
 #   elif defined(GC_OSF1_THREADS) || defined(GC_AIX_THREADS) \
          || defined(GC_SOLARIS_THREADS) || defined(GC_GNU_THREADS) \
-         || defined(PLATFORM_ANDROID) || defined(NACL)
+         || defined(__ANDROID__) || defined(NACL)
       GC_nprocs = sysconf(_SC_NPROCESSORS_ONLN);
       if (GC_nprocs <= 0) GC_nprocs = 1;
 #   elif defined(GC_IRIX_THREADS)
