#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
AlterNative
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Nowadays all the service sectors like industrial, energy, healthcare, security
 within others are including new technological devices connected in the
 network..
 The number of interconnected devices is increasing exponentially in the
 last years.
 Therefore there are appearing huge variety of devices, with different operating
 systems and different programming languages.
 In other words the future situation can be described as an heterogeneous
 distributed system.
 The future of the devices tends to converge in a multiplatform environment
 composed by different devices and elements but with similar capabilites
 and possibilities, not only smartphones, smart TVs or tablets but also
 all kind of elements.
\end_layout

\begin_layout Standard
In this work we present the AlterNative software as a cross-platform code
 translation tool focused on the performance of applications maintaining
 the maximum number of functionalities.
 AlterNative tries to solve the problem of multiplatform software avoiding
 the use of elements which can be perjudicial to the performance like virtual
 machines and aims to increase the efficiency of the code by using native
 languages.
\end_layout

\begin_layout Section
Concept
\end_layout

\begin_layout Standard
The concept of AlterNative is to maximize the idea of Internet of Things
 by providing a tool for easy port applications from high-level languages
 (such as .NET) to native languages (such as C++).
 Most of the actual systems are C++ compatible, thus if the application
 is ported to this language, it can be executed in several platforms (i.e.
 smartphones, tablets, embedded systems, computers with different operating
 systems).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Concpet.PNG
	width 20text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
AlterNative concept
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The philosophy of AlterNative is to provide the user with a system for taking
 the advantage of fast developing of high-level languages and also take
 the advantage of performance of low-level languages, and also exploit the
 possibility of run the native code in several systems, in other words,
 this philosophy is similar to the WORA (Write Once, Run Anywhere) slogan
 created by Sun Microsystem to illustrate the cross-platform benefits of
 the Java Virtual Machine.
 The difference is focused on the final performance since AlterNative outputs
 in native language and does not depend on any virtual machine.
\end_layout

\begin_layout Section
Process
\end_layout

\begin_layout Standard
The process of the AlterNative software is divided in three parts: Decompilation
, translation and compilation.
\end_layout

\begin_layout Standard
First of all the assembly received is passed through a decompiler in order
 to extract the source code.
 In this case the code extracted is C#.
 The code is not extracted in text format, but in an AST (Abstract Syntax
 Tree) that is an abstract representation with nodes and hierarchies of
 the code.
 This representation is organized in a tree from the top-level (Assembly)
 until de low-level (instructions, types and constants).
\end_layout

\begin_layout Standard
The step of translation consists on apply different conversions to the AST
 in order to obtain a second AST representing the source code but in other
 language (in this case C++).
\end_layout

\begin_layout Standard
The final step consists on compile the C++ code into a new assembly.
 This final assembly maintains the same funcionalities of the first assembly
 but takes benefit of the native code performance.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Concept2.PNG
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Process
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The process of decompilation is made using the open-source .NET assembly
 browser and decompiler ILSpy engine.
 ILSpy also decompiles for other languages like VB.NET (Visual Basic) and
 IL (Intermediate Language).
 The translation to C++ has been implemented following the schemes implemented
 in the library ICSharpCode.NRefactory (also present in ILSpy) which is a
 library for C# source code analysis.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The effort of this software is not focused on the code translation, but
 it is focused in maintain all the features and functionalities of the original
 code.
 The problem is that these features and functionalities often are directly
 related to the language, for instance a garbage collector, specific expressions
 or even language syntax.
 AlterNative is able to provide most of the features of the original code
 to the final code using external open-source libraries and propietary libraries
 in order to be fully compatible with high-level languages.
\end_layout

\begin_layout Section
Scenario
\end_layout

\begin_layout Standard
The proposed scenario in this work is described in the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Scenario"

\end_inset

.
 The scenario is composed by an applications database, a Set-top box connected
 to a TV and the AlterNative service deployed in cloud computing.
 The applications database and the AlterNative service are separated into
 two different pieces because it is possible that the receiver device is
 compatible with the application distributed directly from the database.
\end_layout

\begin_layout Standard
The applications data-base contains executables compiled in high-level languages
 and depend on a virtual machine.
 In this case these languages are all the language based or compatible with
 .NET virtual machine (i.e.
 C#, VB.NET, Java).
 If the set-top box is not compatible with these languages, the executable
 is sent to AlterNative service in order to be converted.
 AlterNative converts the code into a native code (C++) and compiles it
 for the appropiate processor.
 The final application is deployed and executed in the Set-top box.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Scenario.PNG
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Scenario
\begin_inset CommandInset label
LatexCommand label
name "fig:Scenario"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This service can not only be applied to set-top boxes, but also for smartphones,
 tablets, computers or even embedded systems which are connected to the
 network.
 Furthermore, the most usual scenario will be a network with several devices
 with some computational power able to execute applications compiled for
 different operating systems, or processors.
 AlterNative improves this scenario compiling the applications for every
 device with a native performance and without the need of a Virtual Machine
 or the need of support the same operating system or the same processor.
 
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
Most of the cross-platform tools in the community are focused only on fast
 development for different devices (for instance games for smartphones).
 AlterNative a part of maintaining the objective of facilitate the easy
 and fast development, also is focused on the final performance of the applicati
on.
 Multiplatform systems based on virtual machines, or in HTML + CSS frameworks
 are useful for visual applications which do not require a high computational
 power, the main advantage of AlterNative software is that it is able to
 run code with native performance while the user is programming its code
 without taking into account the final application performance.
\end_layout

\end_body
\end_document
