#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
State of the art
\end_layout

\begin_layout Subsection
Introduction 
\end_layout

\begin_layout Standard
Nowadays the technology world is converging into a totally distributed system
 and into the world of Internet of Things.
 All kind of devices with all kind of firmwares and operating systems are
 interconnected creating a super-system able to do complex tasks.
 For maintaining the interoperability between devices it is necessary to
 compile applications written in the specific language that accepts the
 processor.
 One option is to deploy Virtual Machines in all the devices benefiting
 of the portability of the code, but the performance it is not ideal.
 For this reason some code translators have taken into account for accom
 After that, several assembly browsers and decompilers are explained which
 are able to extract source code from executables or assemblied files.
 Also is discussed different related projects and memory management solutions
 for optimizing the application.
 
\end_layout

\begin_layout Subsection
Translators
\end_layout

\begin_layout Standard
The translator is a tool for converting the code compiled for one system
 to the same application but compiled for other system.
 The translation can be done in the source code level (change text strings)
 or in other levels like byte code level (change instructions).
 The translation provides the user with a tool which for developing the
 application in a comfortable language (high-level language) benefiting
 of all the high-level features and gaining time in the programming stage.
 When the code is finished, the translator is able to port this application
 developed in a high-level language to a low-level language programmed applicati
on, benefitting of the speed and performance of these languages.
 In this section the more relevant considered translators are explained.
 
\end_layout

\begin_layout Subsubsection
Mandreel 
\end_layout

\begin_layout Standard
Mandreel Framework 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 is a set of tools for converting OpenGL based applications (in C++ or Objective
-C) to web applications.
 It is fully integrated with Microsoft Visual Studio and Apple XCode environment
s and it is optimized for JavaScript and Action Script 3 based applications
 or Adobe Flash / AIR based applications.
 One of the most important features of this framework is that the input
 languages (C++ and Objective-C) are the languages of Android and iOS, thus,
 Mandreel framework provides tools for porting mobile based applications
 to web applications.
 There are two Mandreel SDK packages: 
\end_layout

\begin_layout Itemize
Mandreel SDK for JavaScript: Build C++ applications for JavaScript based
 platforms i.e.
 html5 applications.
 Allows 2D and 3D hardware accelerated applications and standard APIs like
 OpenGL and OpenAL.
 
\end_layout

\begin_layout Itemize
Mandreel SDK for Action Script 3: Build C++ applications for the Adboe Flash/AIR
 platforms.
 Provides the same features than the previous case: 2D/3D applications and
 OpenGL/OpenAL standard APIs.
\end_layout

\begin_layout Standard
Mandreel framework is ideal for gaming and there are different enterprises
 (i.e.
 GameLoft, glu) that are using this framework for providing applications
 over Google Chrome platform for the social networg Google Plus (based on
 html5).
 
\end_layout

\begin_layout Subsubsection
JSIL
\end_layout

\begin_layout Standard
JSIL 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 is a compiler that transforms .NET based applications into JavaScript applicatio
ns.
 JSIL transforms the CIL bytecode (native format of Microsoft .NET applications)
 into standards-compliant, cross-browser JavaScript.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename JSILp.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
JSIL Process
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This translator is ideal for games or graphical applications in web browsers.
 However this translator does not search performance (because of the JavaScript
 language) but is looking for compatibility in all the browsers.
\end_layout

\begin_layout Subsubsection
XMLVM
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename XMLVM.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
XMLVM
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
XMLVM 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

 aims to provide a flexible and extensible cross-compiler toolchain.
 The main feature of this project is that instead of cross-compiling the
 source, XMLVM cross-compiles at the byte-code instructions which is easier
 for transform than the source code with high-level languages.
 XMLVM supports Sun Microsystems virtual machine (Java) and Microsoft Common
 Language Runtime (.NET).
 As XMLVM works with byte codes, it supports several languages based on
 the same virtual machine.
 The process consists on transforming the byte code in an XML representation,
 then this XML is transformed into another XML (with the target language
 format) and then return the source code in the target language.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename XMLVMp.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
XMLVM Process
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main advantage of this system is the architecture.
 With this architecture, it can be added differnt input or output languages
 only change the 3 first boxes for the input language or the two last boxes
 for the output language (and compute the transformation from the input
 XML to the output XML with XSLT method).
\end_layout

\begin_layout Subsubsection
Tangible software solutions 
\end_layout

\begin_layout Standard
Tangible software solutions 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

 defines itself as a software development and consulting firm specializing
 in source code conversion tools and source code conversion projects.
 The conversion utilities they offer are: 
\end_layout

\begin_layout Itemize
Instant C# (VB to C# converter)
\end_layout

\begin_layout Itemize
Instant VB (C# to VB Converter)
\end_layout

\begin_layout Itemize
C++ to C# Converter 
\end_layout

\begin_layout Itemize
C++ to VB Converter 
\end_layout

\begin_layout Itemize
C++ to Java Converter 
\end_layout

\begin_layout Itemize
C# to Java Converter 
\end_layout

\begin_layout Itemize
VB to Java Converter 
\end_layout

\begin_layout Itemize
Java to C# Converter 
\end_layout

\begin_layout Itemize
Java to VB Converter
\end_layout

\begin_layout Itemize
C# to C++ Converter 
\end_layout

\begin_layout Itemize
VB to C++ Converter
\end_layout

\begin_layout Itemize
Java to C++ Converter 
\end_layout

\begin_layout Standard
Tangible software solutions offer several translations.
 The translations are good but they do not support some features (i.e.
 namespaces not supported when translating from C# to C++).
 Another disadvantage is that is not a freeware solution.
 
\end_layout

\begin_layout Subsubsection
TonicVM 
\end_layout

\begin_layout Standard
TonicVM (To .NET Intermediate Code Virtual Machine) 
\begin_inset CommandInset citation
LatexCommand cite
key "key-5"

\end_inset

 is an experimental software tool from InnoveWare Solutions.
 TonicVM is a source-to-source compiler and a Virtual Machine.
 In the first stage is used a front-end (compiler) which is made of a lexer
 and a parser and extracts an Abstract Syntax Tree representation of the
 source code.
 In some languages this front-end also contains a preprocessor (i.e.
 C/C++).
 The syntax tree is translated to common intermediate code using a program
 called back-end.
 The back-end is made of a code optimizer (run transformations in the syntax
 tree in order to be target language compliant) and a code generator (exports
 the transformed syntax tree to source code).
 Finally the target source code is executed over a Virtual Machine.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TonicVM.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TonicVM scheme
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The general scheme is shown in 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Figure 1.4
\end_layout

\end_inset

.
 However the overall scheme in a simpler way is described below in 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Figure 1.5
\end_layout

\end_inset

 represented as different processes of the program.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TonicVMgs.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
TonicVM general scheme
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The architecture followed by TonicVM is similar to the architecture this
 work will follow.
 It is important to notice the use of ASTs (Abstract Syntax Tree) for representi
ng the code, optimize the code and generate the code.
 The box "Code Optimizer" applies transformations to the tree generated
 in the box "AST" and the box "Code generator" converts the tree in plain
 text to be compiled.
 
\end_layout

\begin_layout Subsubsection
Sharpen 
\end_layout

\begin_layout Standard
Sharpen 
\begin_inset CommandInset citation
LatexCommand cite
key "key-6"

\end_inset

 is an Eclipse plug-in for multi-platform development from one codebase.
 Sharpen currently compiles Java to C#, and the difference between the other
 projects are: 
\end_layout

\begin_layout Itemize
Native support for db4o: a open-source object-oriented database that enables
 Java and .NET developers to store and retrieve any application object in
 a simply way.
 
\end_layout

\begin_layout Itemize
.NET naming conventions: Only for convention 
\end_layout

\begin_layout Itemize
Customization: namespaces, methods and properties...
 
\end_layout

\begin_layout Paragraph
\begin_inset Note Note
status open

\begin_layout Plain Layout
CONCL
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Minor projects 
\end_layout

\begin_layout Standard

\series bold
Cxx2cs
\emph on
 
\end_layout

\begin_layout Standard
Direct C++ to C# translator 
\begin_inset CommandInset citation
LatexCommand cite
key "key-7"

\end_inset

.
 This project has academic aim only and offers the translation from C++
 to C# without any compilation progress.
\end_layout

\begin_layout Standard

\series bold
Code Translator (online) 
\end_layout

\begin_layout Standard
This project is an online service for translating code.
 From now it only supports from VB.NET to C# and from C# to VB.NET 
\begin_inset CommandInset citation
LatexCommand cite
key "key-8"

\end_inset

.
 
\end_layout

\begin_layout Standard

\series bold
Source Code Translation from excelsoftware 
\end_layout

\begin_layout Standard
ExcelSoftware proposes a tool and a method to improve the code translation
 work 
\begin_inset CommandInset citation
LatexCommand cite
key "key-9"

\end_inset

.
 This translation method requires human editing, but eliminates much of
 the work and avoid a lot of possible errors.
 The process is divided in three stages: 
\end_layout

\begin_layout Itemize
Create design of old code: A graphic representation of the actual code depending
 on the language.
 The diagram (or diagrams) shows the static structure of the program.
\end_layout

\begin_layout Itemize
Modify design for new code: Once the class diagram (design) is done (and
 also a dictionary which relates the class with its properties and references),
 using a tool provided by ExcelSoftware, the design is changed in order
 to fit the target language rules.
 Can be made changes in names, references, properties etc.
\end_layout

\begin_layout Itemize
Translate function logic: This tool provides an option to simplify the language
 translation process in specific languages like Java and Objective-C.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExcelSoftware.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
ExcelSoftware translator 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are more minor projects but these three are representative enough
 of all the projects and works in progress in the community.
 
\end_layout

\begin_layout Subsection
Decompilers and assembly browsers 
\end_layout

\begin_layout Standard
For this work it is important to study different tools for extract code
 from applications or assemblies.
 This feature allows extracting information of the code and program structure
 from a file which is previously compiled.
 In this section will be studied different decompilers and assembly browsers.
 All of them have approximately the same features, the only difference is
 the languages supported (input and output languages).
 
\end_layout

\begin_layout Subsubsection
ILSpy
\end_layout

\begin_layout Standard
ILSpy 
\begin_inset CommandInset citation
LatexCommand cite
key "key-10"

\end_inset

 is a .NET assembly browser and decompiler.
 It is open-source and its development started after the announcement that
 the free version of NET Reflector would cease to exist by end of February
 2011.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ILSpy.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
ILSpy
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
ILSpy loads the assembly with the Mono.CECIL library (explained after in
 this chapter).
 This library inspects programs and libraries in CIL format.
 With the CECIL library the ILSPy extracts all the types definitions, methods,
 fields etc.
 Through an AST Builder, the program generates an Abstract Syntax Tree represent
ing the source code in an abstract way.
 The final stage is to convert this Abstract Syntax Tree in text (source
 code).
 This program defines different templates, each one for each language.
 The supported languages are: 
\end_layout

\begin_layout Itemize
IL 
\end_layout

\begin_layout Itemize
C# 
\end_layout

\begin_layout Itemize
VB 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ILSpyp.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
ILSPy process
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
CONC
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
Other Decompilers 
\end_layout

\begin_layout Standard
There are several different .NET Decompilers with almost the same features
 of ILSpy.
 Also almost all the .NET Decompilers have the same look and feel.
 The most important are .NET Reflector
\begin_inset CommandInset citation
LatexCommand cite
key "key-11"

\end_inset

 and Spices .NET Decompiler 
\begin_inset CommandInset citation
LatexCommand cite
key "key-12"

\end_inset

.
 Also there are decompilers for other languages or frameworks like DJ Java
 Decompiler 
\begin_inset CommandInset citation
LatexCommand cite
key "key-15"

\end_inset

 for Java language, VB Decompiler 
\begin_inset CommandInset citation
LatexCommand cite
key "key-16"

\end_inset

 for Visual Basic language and Sothink SWF Decompiler 
\begin_inset CommandInset citation
LatexCommand cite
key "key-17"

\end_inset

 for Flash animations.
\end_layout

\begin_layout Subsection
Memory management in C++
\end_layout

\begin_layout Subsubsection
A Method for Automatic Optimization of Dynamic Memory Management in C++
 
\end_layout

\begin_layout Standard
This paper 
\begin_inset CommandInset citation
LatexCommand cite
key "key-19"

\end_inset

 explains the implemented pre-processor based method named Amplify.
 This method optimizes C++ applications to exploit the temporal locality
 in dynamic memory usage.
 Amplify is based on Structure pools: 
\end_layout

\begin_layout Standard
\align center

\shape italic
"[...]The concept of object pools, also known as memory pools, is a well-known
 memory management technique.
 An object pool acts as a layer between the application and the dynamic
 memory management subsystem.
 When allocating memory for an object, a call to an object pool is made
 instead of making direct calls to the memory manager, i.e.
 malloc ( ) .
 An object pool holds a free list containing objects of a specific type.
 When an object is requested an object is extracted from the free list and
 returned to the caller.
 Thus, no call to the memory manager is needed, instead an already allocated,
 but not currently used, object is reused.
 Further, when deallocating memory a call to the pool is made instead of
 directly calling the memory manager, i.e.
 free ( ) .
 The pool will then insert the object into its free list for later reuse.
 This kind of strategy reduces the number of calls made to the memory management
 subsystem.
 However, in a multithreaded environment there is still a need for mutual
 exclusion during operations on the pool’s free list.[...]" 
\end_layout

\begin_layout Standard
The objects in the pool contains all the references to other objects.
 If an object is needed, when this object is extracted from the pool already
 contains all its fields and pointers to other elements.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename PoolExample.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Pool example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The use of this structure is tested in three test cases: 
\end_layout

\begin_layout Itemize
Test case 1: The worst case.
 A very simple case (with shallow structures) only for test if the Amplify
 overhead makes worst the overall performance 
\end_layout

\begin_layout Itemize
Test case 2: A normal case of application 
\end_layout

\begin_layout Itemize
Test case 3: The best case.
 Very deep structures in which the Amplify method can reuse objects and
 optimize the memory management.
 The results are shown in the following figures.
 
\end_layout

\begin_layout Itemize
The figures are extracted from 
\begin_inset CommandInset citation
LatexCommand cite
key "key-19"

\end_inset

.
 In these tests the Amplify method is compared with ptmalloc 
\begin_inset CommandInset citation
LatexCommand cite
key "key-20"

\end_inset

 and Hoard 
\begin_inset CommandInset citation
LatexCommand cite
key "key-21"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC1.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Test case 1
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC2.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Test case 2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename TC3.PNG
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Test case 3
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Comparison of Garbage Collector Prototypes for C++ Applications 
\end_layout

\begin_layout Standard
A Garbage Collector (GC) is a critical memory management process in programming
 languages such as C++.
 The programmers need to be aware about memory management and cannot be
 relieved from this task.
 They have to implement explicitly this task whatever the size of C++ applicatio
ns.
 Consequently, this leads to errors and bugs (i.e.
 dangling pointers, allocation failures, etc.).
 Therefore, supporting implicit memory management based of aspect-oriented
 programming can provide a number of benefits such as freeing the programmer
 of memory management task.
 This paper 
\begin_inset CommandInset citation
LatexCommand cite
key "key-22"

\end_inset

 uses Aspect-Oriented Programming to manage implicity the allocationd and
 release of memory.
 Two prototypes of memory management are described in this project.
 These methods implement reference counting and mark and sweep techniques.
 The authors conclude that implementing these aspect-oriented programming
 (AOP) techniques, the user is relieved from memory management tasks and
 the bugs are reduced.
 The futur research lines of this work is to add a garbage collector in
 C++ using AOP.
 
\end_layout

\begin_layout Subsection
Libraries and code infrastructures 
\end_layout

\begin_layout Subsubsection
LLVM
\end_layout

\begin_layout Standard
LLVM 
\begin_inset CommandInset citation
LatexCommand cite
key "key-23,key-24"

\end_inset

 is a research project at the Univerity of Illinois.
 The goal of LLVM is to provide a modern, SSA-based compilation strategy
 capable of supporting both static and dynamic compilation or arbitrary
 programming languages.
 Since this point, LLVM has been an unmbrella project consisting of different
 subprojects.
 LLVM Project can be defined as a collection of modular and reusable compiler
 and toolchain technologies.
 Some sample projects based on LLVM are: 
\end_layout

\begin_layout Itemize
Clang: C/C++ compiler 
\end_layout

\begin_layout Itemize
libc++ and libc++ ABI: High-performance implementation of C++ standard library
 
\end_layout

\begin_layout Itemize
vmkit: Java and .NET Virtual Machines 
\end_layout

\begin_layout Standard
LLVM is important in the science community and it is growing in the last
 years and there are research projects which combine other research lines
 with LLVM, an example is showed in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-25"

\end_inset

 which is "An LLVM-based decoder for MPEG reconfigurable video coding".
 This project combines the active research of LLVM and MPEG in order to
 take benefit of the portability and scalability of LLVM in MPEG decoders
 systems.
 LLVM is taking so importance than there is comparisons between LLVM and
 important compilers like GCC.
 The paper 
\begin_inset CommandInset citation
LatexCommand cite
key "key-26"

\end_inset

 studies this comparison and concludes that LLVM is better for the actual
 systems because of the portability and scalability that a Virtual Machine
 offers.
 LLVM has to improve its performance in some cases because the optimization
 of GCC is better, but improving this point, LLVM can be considered very
 near of GCC in a global point of view.
 
\end_layout

\begin_layout Subsubsection
Mono.CECIL 
\end_layout

\begin_layout Standard
Mono.Cecil 
\begin_inset CommandInset citation
LatexCommand cite
key "key-27"

\end_inset

 is a library written by Jb Evain to generate and inspect programs and libraries
 in the ECMA CIL format.
 It has full support for generics, and support some debugging symbol format.
 In simple English, with Cecil, you can load existing managed assemblies,
 browse all the contained types, modify them on the fly and save back to
 the disk the modified assembly.
 Today it is used by the Mono Debugger, the bug-finding and compliance checking
 tool Gendarme, MoMA, DB4O, as well as many other tools.
 
\end_layout

\begin_layout Subsubsection
OpenC++ and OpenJava
\end_layout

\begin_layout Standard
OpenC++ 
\begin_inset CommandInset citation
LatexCommand cite
key "key-28"

\end_inset

 is a version of C++ with a Metaobject Protocol (MOP).
 In other words, it is a tool of source-code translation for C++.
 Programmers can easily implement various kinds of translation so that they
 can define new syntax, new annotation, and new object behavior.
 OpenJava 
\begin_inset CommandInset citation
LatexCommand cite
key "key-29"

\end_inset

 follows the same idea of OpenC++ but for Java language.
 It also uses MOP in order to provide customization to the programmers.
 
\end_layout

\begin_layout Subsection
Research projects 
\end_layout

\begin_layout Subsubsection
Particle Code
\end_layout

\begin_layout Standard
The Particle Platform is an open and extensible cross-platform end-to-end
 solution that enables developers to create native applications for smartphone
 platforms as well as HTML5 web applications.
 It allows developers to code in modern object-oriented languages like Java
 and ActionScript3, while working in the popular Eclipse IDE with a robust
 WYSIWYG front-end to manage User Interface design on various devices.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ParticleCode.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Particle Code engine
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
PARTICLE TRANSLATOR
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The translator uses patent-pending translation technology to convert application
s from one of the supported input languages (Java or AS3) to any of the
 native output languages (Java, AS3, C#, C++, JavaScript, etc.) that correspond
 to the supported target platforms.
 The Particle Translator can also be used as an independent module to translate
 any legacy code from one language to another.
 Particle Code has filed numerous patents since 2009 around this technology
 and its optimization across platforms.
\end_layout

\begin_layout Subsubsection
Alchemy
\end_layout

\begin_layout Standard
Alchemy 
\begin_inset CommandInset citation
LatexCommand cite
key "key-30"

\end_inset

 is a research project that allows users to compile C and C++ code that
 is targeted to run on the open source ActionScript Virtual Machine (AVM2).
 The purpose of this preview is to assess the level of community interest
 in reusing existing C and C++ libraries in Web applications that run on
 Adobe® Flash® Player and Adobe AIR®.
 With Alchemy, Web application developers can now reuse hundreds of millions
 of lines of existing open source C and C++ client or server-side code on
 the Flash Platform.
 Alchemy brings the power of high performance C and C++ libraries to Web
 applications with minimal degradation on AVM2.
 The C/C++ code is compiled to ActionScript 3.0 as a SWF or SWC that runs
 on Adobe Flash Player 10 or Adobe AIR 1.5.
 Alchemy is primarily intended to be used with C/C++ libraries that have
 few operating system dependencies.
 Ideally suited for computation-intensive use cases, such as audio/video
 transcoding, data manipulation, XML parsing, cryptographic functions or
 physics simulation, performance can be considerably faster than ActionScript
 3.0 and anywhere from 2-10x slower than native C/C++ code.
 Alchemy is not intended for general development of SWF applications using
 C/C++.
 With Alchemy, it is easy bridge between C/C++ and ActionScript 3.0 to expand
 the capabilities of applications on the Flash Platform, while ensuring
 that the generated SWCs and SWFs cannot bypass existing Flash Player security
 protections.
 Adobe is providing some example libraries, and developers are encouraged
 to share their ported libraries.
 The Alchemy preview is prerelease software that is not supported by Adobe
 and may contain bugs.
 It is therefore advised that Alchemy not be used to generate code for use
 in production.
 We are making this software available to gauge community interest in Alchemy
 and welcome your feedback.
 Please use the feedback link below to request features, make comments and
 report problems.
 Please also note that this is a research project and there is no assurance
 that there will be a shipping version of Alchemy.
 
\end_layout

\begin_layout Subsubsection
Emscripten 
\end_layout

\begin_layout Standard
Emscripten 
\begin_inset CommandInset citation
LatexCommand cite
key "key-31"

\end_inset

 is an LLVM-to-JavaScript compiler.
 It takes LLVM bitcode (which can be generated from C/C++ using Clang, or
 any other language that can be converted into LLVM bitcode) and compiles
 that into JavaScript, which can be run on the web (or anywhere else JavaScript
 can run).
 Using Emscripten, you can 
\end_layout

\begin_layout Itemize
Compile C and C++ code into JavaScript and run that on the web 
\end_layout

\begin_layout Itemize
Run code in languages like Python as well, by compiling CPython from C to
 JavaScript and interpreting code in that on the web 
\end_layout

\begin_layout Subsubsection
Jangaroo 
\end_layout

\begin_layout Standard
Jangaroo 
\begin_inset CommandInset citation
LatexCommand cite
key "key-32"

\end_inset

) is an Open Source project building developer tools that adopt the power
 of ActionScript 3 to create high-quality JavaScript frameworks and applications.
 Jangaroo is released under the Apache License, Version 2.0.
 The main tool is an ActionScript-3-to-JavaScript compiler called jooc.
 It takes source code written in a subset of ActionScript 3 and translates
 it into JavaScript 1.x that is understood by current browsers (with the
 aid of a light-weight runtime).
 There are several applications using this converter.
 The major part of this applications are games and graphical applications.
 
\end_layout

\begin_layout Subsubsection
IKVM.NET 
\end_layout

\begin_layout Standard
IKVM.NET 
\begin_inset CommandInset citation
LatexCommand cite
key "key-33"

\end_inset

 is an implementation of Java for Mono and the Microsoft .NET Framework.
 It includes the following components: 
\end_layout

\begin_layout Itemize
A Java Virtual Machine implemented in .NET 
\end_layout

\begin_layout Itemize
A .NET implementation of the Java class libraries
\end_layout

\begin_layout Itemize
Tools that enable Java and .NET interoperability
\end_layout

\begin_layout Standard
IKVM.NET includes ikvmc, a Java bytecode to .NET IL translator.
 If you have a Java library that you would like to use in a .NET application,
 with ikvmc you can create a .dll library from a .jar library.
\end_layout

\begin_layout Subsubsection
Garbage collector projects 
\end_layout

\begin_layout Standard
Garbage collector is an automatic memory management which frees memory occupied
 by objects that are no longer in use by the program.
 Was invented by John McCarthy in 1959.
 There are programming languages which have integrated an implementation
 of garbage collector (i.e.
 .NET environment, Java ) but low level languages like C/C++ did not have
 garbage collector, the programmer is in charge of the memory management
 (this is a manual memory management).
 There are different projects for implementing automatic memory management
 in manual manual memory management environments (such as C/C++).
 
\end_layout

\begin_layout Itemize
Boehm-Demers-Weiser conservative garbage collector: A garbage collector
 for C and C++ REF This project 
\begin_inset CommandInset citation
LatexCommand cite
key "key-34"

\end_inset

 is an implementation of a garbage collector for C and C++ languages.
 This garbage collector allows allocating memory without explicity deallocating
 this memory after use it.
 
\end_layout

\begin_layout Itemize
A garbage collection framework for C++ REF This project 
\begin_inset CommandInset citation
LatexCommand cite
key "key-35"

\end_inset

 is a very simple framework for use garbage collector philosophy in C++
 which does not have native garbage collector support.
\end_layout

\begin_layout Subsection
Aporte 
\end_layout

\begin_layout Itemize
Traducción a nivel de código 
\end_layout

\begin_layout Itemize
Soprtar features de C# (máximas posibles) 
\end_layout

\begin_layout Itemize
Proceso transparente: de .exe a .exe 
\end_layout

\begin_layout Itemize
Gestión de memoria decente en C++ 
\end_layout

\begin_layout Itemize
Servicio cloud
\end_layout

\begin_layout Section
Interesting links
\end_layout

\begin_layout Standard
http://www.gccxml.org/HTML/Index.html
\end_layout

\begin_layout Standard
http://digitocero.com/en/blog/exporting-and-visualizing-gccs-abstract-syntax-tree
-ast
\end_layout

\begin_layout Standard
http://www.semanticdesigns.com/Products/FrontEnds/CppFrontEnd.html
\end_layout

\begin_layout Standard
http://www.csg.is.titech.ac.jp/~chiba/javassist/index.html
\end_layout

\begin_layout Standard
http://code.google.com/p/nativeclient/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

http://www.mandreel.com/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

http://jsil.org
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

http://xmlvm.org/overview/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

http://tangiblesoftwaresolutions.com/index.htm
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

http://www.innoveware.com/tonicvm.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-6"

\end_inset

http://community.versant.com/Projects/html/projectspaces/db4o_product_design/sharp
en.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-7"

\end_inset

http://sourceforge.net/projects/cxx2cs/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-8"

\end_inset

http://www.carlosag.net/tools/codetranslator/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-9"

\end_inset

http://www.excelsoftware.com/whitepapers.html -> Source Code Translation
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-10"

\end_inset

http://wiki.sharpdevelop.net/ILSpy.ashx
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-11"

\end_inset

http://www.reflector.net/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-12"

\end_inset

http://www.9rays.net/Category/54-spicesnet-decompiler.aspx
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-15"

\end_inset

http://www.neshkov.com/dj.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-16"

\end_inset

http://www.vb-decompiler.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-17"

\end_inset

http://www.sothink.com/product/flashdecompiler/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-18"

\end_inset

http://www.backerstreet.com/rec/rec.htm
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-19"

\end_inset

D.
 Häggander, P.
 Lidén and LArs Lundberg, "A Method for Automatic Optimization of Dynamic
 Memory Management in C++", at Dep.
 of Software Engineering and Computer Science, Blekinge Institute of Technology,
 Ronneby, Sweden.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-20"

\end_inset

E.Berger K McKinley, R.
 Blumofe, and P.Wilson, "Hoard: A Scalable Memory Allocator for Multithreaded
 Applications", in Proc.
 of the Ninth International Conference on Architectural Support for Programming
 Languages and Operating Systems (ASPLOS-IX), Cambridge, MA, Novemebre 2000
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-21"

\end_inset

W.
 Gloger, "Dynamic memory allocator implementations in Linux", http://www.dent.med.
 uni-muenchen.de/~wmglo/malloc-slides.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-22"

\end_inset

H.
 Mcheick, A.Sioud, "Comparison of Garbage Collector Prototypes for C++ Applicatio
ns", at University of Quebec at Chicoutimi, UQAC, Canada
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-23"

\end_inset

C.
 Lattner, V.
 Adve,"LLVM: A compilation framework for Lifelong Program Analysis & Transformat
ion", University of Illinois at Urbana-Champaign
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-24"

\end_inset

http://llvm.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-25"

\end_inset

J.
 Gorin, M.Wipliez, J.Piat F.Prêteux, M.
 Raulet, "An LLVM-based decoder for MPEG reconfigurable video coding", ARTEMIS,
 Institut Télécom SudParis, Evry, France and IETR, INSA Rennes, France.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-26"

\end_inset

J.
 Kim, S.
 Lee, S.
 Moon, S.
 Kim,"Comparison of LLVM and GCC on the ARM Platform", Seoul National University
, Korea Institute of Science and Technology, Seoul, Korea
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-27"

\end_inset

http://www.mono-project.com/Cecil
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-28"

\end_inset

http://opencxx.sourceforge.net/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-29"

\end_inset

http://www.csg.is.titech.ac.jp/openjava/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-30"

\end_inset

http://labs.adobe.com/technologies/alchemy/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-31"

\end_inset

https://github.com/kripken/emscripten
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-32"

\end_inset

http://www.jangaroo.net/home/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-33"

\end_inset

http://www.ikvm.net/index.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-34"

\end_inset

http://www.hpl.hp.com/personal/Hans_Boehm/gc/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-35"

\end_inset

http://www.codeproject.com/Articles/912/A-garbage-collection-framework-for-C
 
\end_layout

\end_body
\end_document
